예제 1번 
#include <iostream>
#include <stdio.h>

int main()
{
    int n = 3;
    char c = '#';
    printf( "%c5.5-%dhello%d", c, n, true);
    return 0;  // main() 함수가 종료하면 프로그램이 종료됨
}
예제 2번
#include <iostream>
#include <stdio.h>

double area(int r);

int main()
{
    int n = 3;
    char c = '#';
    printf( "%c5.5-%dhello%d\n", c, n, true);
    printf("n + 5 = %d\n", n + 5);
    printf("면적은 %.2f", area(n));
    return 0;  // main() 함수가 종료하면 프로그램이 종료됨
}

double area(int r) 
{
    return 3.14 * r * r;
}

c++ 코드를 c언어로 바꿔서 실행하니 출력문을 작성할 때 값을 바로바로 사용하는 것이 아닌 값을 따로 지정해줘야 한다는 단점이 있었다. 또한 디버깅을 할 때 객체 하나하나의 값을 따로 지정하여 출력해야 하는점이 c++에 비해 비효율적이라고 생각하였다.  

예제 5번 문제
c스트링을 이용하여 암호가 입력되면 프로그램을 종료하는 문제. 
#include <iostream>
#include <cstring>
using namespace std;

int main()
{
    cout << "프로그램을 종료하려면 암호를 입력하세요.\n";

    while (true)
    {
        cout << "암호>>";
        char password[100];
        cin >> password;
        if (strcmp(password ,"C++") == 0)
        {
            cout << "프로그램을 정상 종료합니다.";
            break;
        }
        else
        {
            cout << "암호가 틀립니다~~" << endl;
        }
    }
}
반복문을 사용하여 초기에 설정한 암호와 사용자가 입력한 암호가 같으면 종료되는 프로그램이다. 처음 코드를 짤때는 단순히 if문 안에 암호를 설정하고, 그 암호와 사용자가 입력하는 암호가 같으면 프로그램이 종료되도록 설계했지만 실패하였고, 찾아본결과 strcmp라는 두 문자열을 비교하는 함수를 사용하면 된다는 해답을 얻게되었다. strcmp함수를 사용하여 코드를 짜본 결과, strcmp함수는 두 문자열이 같을 경우 0을 반환하고, 첫 번째 문자열이 두 번째 문자열보다 클 경우 양수를 반환하며, 그 반대의 경우 음수를 반환한다는 점을 배우게 되었다. 
#include <iostream>
#include <string>

using namespace std;

int main()
{


    cout << "5명의 이름을 ';'으로 구분하여 입력하세요" << endl << ">>";

    string long_name;

    for (int i = 1; i < 6; i++)
    {
        string name;
        getline(cin, name, ';');
        cout << i << " : " << name << endl;

        if (name.length() > long_name.length())
        {
            long_name = name;
        }
    }

    cout << "가장 긴 이름은 " << long_name << endl;

}
문제는 5개의 이름을 작성하고, ;으로 구분 하여 5개의 이름을 출력하는 것이고, 마지막으로 가장 긴 이름을 출력하는 것이다. 먼저 5개의 이름을 작성하기 위해 getline 함수를 사용하여 ;을 기준으로 나뉘어 지게 하였다. 또한 if 문과 length 함수를 통해 이름의 길이를 구별하고 5개의 이름들을 2개씩 비교하여 가장 긴 이름은 long_name 변수 안으로 들어가게 하였고, 비교가 끝나면 출력되도록 하였다. 