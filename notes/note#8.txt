C++ 입출력 기초
스트림: 데이터의 흐름, 혹은 데이터를 전송하는 소프트웨어 모듈
C++ 스트림 종류
입력 스트림: 입력장치, 네트워크, 파일로부터 데이터를 프로그램을 전달하는 스트림
출력 스트림: 프로그램에서 출력되는 데이터를 출력장치, 네트워크, 파일로 전달하는 스트림

C++ 입출력 스트림 버퍼
입력장치로부터 입력된 데이터를 프로그램으로 전달하기 전에 일시 저장. 키 입력 도중에 수정가능하다.
C++ 응용프로그램은 사용자의 키 입력이 끝난 시점에서 읽으며 Enter키는 키 입력의 끝을 의미하며, Enter키가 입력된 시점부터 키 입력 버퍼에서 프로그램이 읽기 시작한다. 

스크린 출력 스트림 버퍼는 프로그램에서 출력된데이터를 출력장치로 보내기 전에 일시저장하며 출력 장치를 반복적으로 사용하는 비효율성을 개선하기 위해 제작되었다. 

저수준 입출력 방식 
키가 입력 되는 즉시 프로그램에게 키 값 전달

ex) 스타 빌드업시  여러가지 만들어야 함 →여러키를 계속 입력해야함 → 그렇기에 즉각적으로 필요한 곳에서 사용되어야 함

2003년 이전엔 입출력 라이브러리를 한 바이트의 char로 처리 했지만 이후 다양한 크기의 다국어 문자를 수용하기 위해, 입출력 라이브러리가 템플릿으로 작성되었다. 

입출력 클래스
ios: 모든 입출력 스트림 클래스들의 기본 클래스.
istream: 문자 단위 입력스트림
ostream: 문자 단위 출력스트림
iostream: 문자 단위 입출력 동시 가능 스트림
ifstream: 파일을 읽는 스트림
ofstream: 파일을 쓰는 스트림
fstream: 읽고쓰기를 동시에 하는 스트림

istream 멤버 함수: 문자 입력, get()함수
int get() 입력 스트림에서 문자를 읽어 리턴하며, 오류나 EOF를 만나면 -1(EOF)를 리턴한다.
istream& get(char& ch) 입력 스트림에서 문자를 읽어 ch에 저장한후, 현재 입력 스트림 객체(*this)의 참조 리턴, 오류나 EOF를 만나면, 스트림 내부의 오류 플래그 세팅

문자열 입력 
istream& get(char*s, int n)
입력 스트림으로 부터 n-1개의 문자를 읽어 배열 s에 저장하고 마지막에 '\0'문자 삽입. 입력 도중 '\n'을 만나면 '\0'을 삽입하고 리턴한다.

istream& ignore(int n=1, int delim=EOF) 입력 스트림에서 n개 문자 제거, delim 문자를 만나면 delim 문자를 제거하고 리턴

int gcount() 최근에 입력스트림에서 읽은 바이트 수(문자의 개수) 리턴, <Enter> 키도 개수에 포함

포멧 입출력
포멧 플래그: 입출력 스트림에서 입출력 형식을 지정하기 위한 플래그
Long setf(Long flags) flags를 스트림의 포맷 플래그로 설정하고 이전 플래그를 리턴한다.
Long unsetf(Long flags) flags에 설정된 비트 값에 따라 스트림의 포맷 플래그를 해제하고 이전 플래그를 리턴한다.

조작자
개발자 만의 조작자를 작성 할수있으며, 매개변수를 가진 조작자와 매개변수가 없는 조작자로 나뉘어 진다. 

사용자 삽입 연산자 
Point 클래스에 대해 cout << p;가 가능하도록 << 연산자를 작성하는법
<< (cout, p);를 통해 외부 연산자 함수를 사용한다.
ex) ostream& operator << (ostream& stream, Point a)

예제 11-9 
private 멤버를 사용하기 위해  클래스 내에서 friend로 선언하였고, 사용자 삽입 연산자를 사용하여서 Point 객체를 표현하였다. 

추출연산자: 삽입 연산자와 동일함
Point 클래스에 대해 cin >> p; 가 가능하도록 >> 연산자를 작성하는법 
>> (cin, p);를 통해 외부 연산자 함수를 사용한다. 
ex) istream& operator >> (istream& stream, Point& a)

사용자 정의 조작자 
입력시 istream& ******* (istream& ins)
출력시 ostream& ******* (ostream& outs)

팀원간의 생각 정리

지금까지 #include <iostream>을 사용하면서 그냥 사용하라 했으니까 사용해왔습니다. 하지만 이번 주차 강의를 들으면서 iostream이 무엇인지, 왜 써야 하는지에 대해 알게되었습니다. 또한 istream과 ostream이 각각 입력과 출력을 담당하고 있는데, 이에 대해 왜 굳이 둘로 나눠서 써야 할까. 또 저 둘이 있는데 iostream은 왜 만들었을까 라는 생각이 들었습니다. 찾아 본 결과 C++의 입출력 라이브러리가 다양한 입출력 소스와 대상을 지원하기 위함인것을 알아내었고, 구조를 나눠서 다양한 입출력 소스 및 대상에 대한 접근 유연성을 높이기 위한것이 가장 큰 이유라는걸 배웠습니다.